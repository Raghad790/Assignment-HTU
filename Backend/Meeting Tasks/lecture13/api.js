import express from "express";
import bodyParser from "body-parser";
import pg from "pg";

const app = express();
const port = 4000;

//connect to the database
const db = new pg.Client({
  //path of connection
  user: "postgres",
  host: "localhost",
  database: "Blog", //name of the database
  password: "Raghadkk772",
  port: 5432, //defult port
});
//db.connect =>promise
db.connect()
  .then(() => {
    console.log("connected to Postgres");
  })
  .catch(() => {});

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json()); //parsing the json

//Read(get all posts in the database)
app.get("/posts", async (req, res) => {
  try {
    //query is an async function ..so we should use async await to get all posts
    const result = await db.query("SELECT * FROM posts");
    //rows=>(array of n=number of posts)
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

//get post by id
app.get("/posts/:id", async (req, res) => {
  const id = parseInt(req.params.id);
  try {
    const result = await db.query("SELECT * FROM posts WHERE id=$1", [id]);
    //to check if the post exist or not
    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.status(404).json({ error: "Post Not Found" });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});
// CREATE (postgres query)
app.post("/posts", async (req, res) => {
  const { title, content, author } = req.body;
  //req.body object contain the data that we send from the client side
  //EX: will do mapping for the title varaible and the tile from the body
  //date and  id is auto generated by the database
  console.log(req.body); //to check the data that we send from the client side
  try {
    //insert the data (attribute) into the database
    const result = await db.query(
      "INSERT INTO posts (title,content,author) VALUES ($1,$2,$3) RETURNING *",
      [title, content, author]
    ); //the order is very important
    //RETURNING * to return the data that we insert into the database
    res.status(201).json(result.rows[0]);
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// UPDATE IN CRUD OPERATIONS
// API to patch posts. (test it on postman)
// to be in the safe side use patch because user not always give me or return the variables for title, content, author,...
app.put("/posts/:id", async (req, res) => {
  const id = parseInt(req.params.id);
  const { title, content, author } = req.body;
  try {
    const result = await db.query(
      "UPDATE posts SET title=$1, content=$2, author=$3,date=NOW() WHERE id=$4 RETURNING *",
      [title, content, author, id]
    );
    if (result.rows.length > 0) {
      res.status(200).json(result.rows[0]);
    } else {
      res.status(404).json({ error: `Post id ${id}Not Found` });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

//Patch (alittle bit tricky because we update on or more attributes not all of them)
app.patch("/posts/:id", async (req, res) => {
  const id = req.params.id;
  const { title, content, author } = req.body;
  try {
    const fields = [];
    const values = [];
    let count = 1;
    //check if there are a title, content, author
    //if there is a title, content, author we will add them to the fields and values
    if (title) {
      fields.push(`tilte =$${count++}`);
      values.push(title);
    }
    if (content) {
      fields.push(`content =$${count++}`);
      values.push(content);
    }
    if (author) {
      fields.push(`author=$${count++}`);
      values.push(author);
    }
    //id is the last value in the array
    values.push(id);
    //(for example id=4  beacause count=4 )
    //postgres query => without values ==sees the statment
    //ust the join to convert the array to string
    const result = await db.query(
      `UPDATE posts SET ${fields.join(
        ", "
      )} ,date=NOW() WHERE id=$${count} RETURNING *`,
      values
    );
    if (result.rows.length > 0) {
      res.status(200).json(result.rows[0]);
    } else {
      res.status(404).json({ error: `Post id ${id} Not Found` });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});
//Delete
app.delete("posts/:id",async(req,res)=>{
  const id=parseInt(req.params.id);
 try{
const result =await db.query('DELETE FROM posts WHERE id=$1 RETURNING *',[id]);
//if the post exist or not ,very important step
if(result.rows.length>0){
  res.status(200).json(result.rows[0]);
 } else{
  res.status(404).json({error:`Post id ${id} Not Found`});
 }
 
}catch(error){
res.status(500).json({error:"Internal Server Error"});
 }
});

app.listen(port, () => {
  console.log("Api: localhost:4000");
});
